# sudo ansible-playbook -i ../hosts 10-adddns.yaml
# Run the following command in case of adding new node after the initial dns installation setup
# command 1:sudo ansible -i ../hosts ocpdns.sandbox.com -m shell -a "echo -e \"192.168.122.35 node2.sandbox.com node2\" >> /etc/hosts"
# command 2:sudo ansible -i ../hosts ocpdns.sandbox.com -m shell -a "systemctl restart dnsmasq"
---
- name: Clone a Virtual Machine
  hosts: dns
  connection: local
  become: true
  become_user: root
  serial: 1
  tags:
    - clone
  tasks:
    - name: Listing all the vms already cloned
      shell: virsh --connect qemu:///system list --all --name
      register: vmlist

    - name: check contents for emptiness
      debug:
        var: vmlist.stdout_lines
      when: vmlist.stdout.find(inventory_hostname) == -1

    - name: Cloning a new node
      shell: virt-clone --connect qemu:///system --original {{imagetoclone}} --name  {{inventory_hostname}} --file /home/shsrivas/VirtualMachines/{{inventory_hostname}}.qcow2
      when: vmlist.stdout.find(inventory_hostname) == -1

    - name: check groupname
      debug:
        var: group_names

    - include_vars: "roles/dns/defaults/main.yml"
      when: "'dns' in group_names"

    - name: Setting the maximum memory for VirtualMachines
      shell: virsh setmaxmem {{inventory_hostname}} {{maxmem}} --config
      when: vmlist.stdout.find(inventory_hostname) == -1

    - name: Setting the current memory for VirtualMachines
      shell: virsh setmem {{inventory_hostname}} {{currentmem}} --config
      when: vmlist.stdout.find(inventory_hostname) == -1

    - name: Starting the created VirtualMachines
      shell: virsh start {{inventory_hostname}}
      when: vmlist.stdout.find(inventory_hostname) == -1

    - name: Listing the ip address of created vm
      shell: virsh domifaddr {{inventory_hostname}}|tail -2 | awk '{print $4}'| cut -d/ -f1
      register: output
      until: output.stdout != ""
      delay: 10
      retries: 5

    - debug: var=output.stdout

- name: copy public key to all Virtual Machine
  hosts: dns
  connection: local
  tags:
    - copy-id
  tasks:
    - name: Listing the ip address of vm ,where public key needs to be copied
      shell: virsh domifaddr {{inventory_hostname}}|tail -2 | awk '{print $4}'| cut -d/ -f1
      register: tohostname

    - debug: var=tohostname.stdout

    - name: Set authorized key took from file
      shell: sshpass -p 'admin#123' ssh-copy-id -i /root/.ssh/id_rsa.pub -o StrictHostKeyChecking=no {{tohostname.stdout}}

- name: set facts for Virtual Machine
  hosts: dns
  connection: local
  tags:
    - set-facts
  tasks:
    - name: Listing the ip address of vm
      shell: virsh domifaddr {{inventory_hostname}}|tail -2 | awk '{print $4}'| cut -d/ -f1
      register: tohostname

    - debug: var=tohostname.stdout
    - name: :add facts
      local_action:
        module: set_fact
        ansible_ssh_host: "{{ tohostname.stdout }}"

- name: Subscribe the Virtual Machine
  hosts: dns
  serial: 1
  tags:
    - subscribe
  tasks:
    - name: Subscribe to access.redhat.com
      redhat_subscription:
        state: present
        username: "{{ redhat_username }}"
        password: "{{ redhat_password }}"
        pool: "{{ redhat_pool }}"
        consumer_name: "{{inventory_hostname}}"




- name: disable and enable required repo for all except installer
  hosts: dns
  tags:
    - repos
  tasks:
    - name: Disable all repositories
      shell: subscription-manager repos --disable=*

    - name: Enable all repositories which are needed
      shell: subscription-manager repos --enable=rhel-7-server-rpms --enable=rhel-7-server-extras-rpms --enable=rhel-7-server-ose-3.10-rpms --enable=rhel-7-server-ansible-2.4-rpms



- name: Include dns role
  hosts: dns
  become: true
  become_user: root
  tags:
    - dns-role
  tasks:
    - include_role:
        name: dns
      when: "'dns' in group_names"

- name: Reboot dns
  hosts: dns
  connection: local
  tags:
    - reboot
  tasks:
    - name: reboot {{inventory_hostname}}
      shell: virsh reboot {{inventory_hostname}}
    - pause:
        seconds: 10


- name: Verify if all the machines are up again
  hosts: dns
  connection: local
  tags:
    - verify-reboot
  tasks:
    - name: Listing the if the machine is up
      shell: virsh list --state-running --name
      register: output
      until: output.stdout.find(inventory_hostname) != -1
      delay: 10
      retries: 5


- name: Reboot dns machines
  hosts: dns
  connection: local
  tags:
    - reboot
  tasks:
    - name: reboot {{inventory_hostname}}
      shell: virsh reboot {{inventory_hostname}}
    - pause:
        seconds: 10
