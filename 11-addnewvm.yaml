# sudo ansible-playbook -i ../hosts 11-addnewvm.yaml
# One can run it for the the single node by limiting it.
# ansible-playbook -i ../hosts 11-addnewvm.yaml  --limit=node2.sandbox.com
# Running the same command agin throws exeception but does not harm
# Need to modify it to work better with Idempotent functionality.


---
- name: Clone a Virtual Machine
  hosts: installer,master,node
  connection: local
  become: true
  become_user: root
  serial: 1
  tags:
    - clone
  tasks:
    - name: Listing all the vms already cloned
      shell: virsh --connect qemu:///system list --all --name
      register: vmlist

    - name: check contents for emptiness
      debug:
        var: vmlist.stdout_lines
      when: vmlist.stdout.find(inventory_hostname) == -1

    - name: Cloning a new node
      shell: virt-clone --connect qemu:///system --original {{ imagetoclone }} --name  {{inventory_hostname}} --file {{ vmdirectory }}{{inventory_hostname}}.qcow2
      when: vmlist.stdout.find(inventory_hostname) == -1

    - name: check groupname
      debug:
        var: group_names


    - include_vars: "roles/master/defaults/main.yml"
      when: "'master' in group_names"

    - include_vars: "roles/node/defaults/main.yml"
      when: "'node' in group_names"

    - include_vars: "roles/installer/defaults/main.yml"
      when: "'installer' in group_names"

    - name: Setting the maximum memory for VirtualMachines
      shell: virsh setmaxmem {{inventory_hostname}} {{maxmem}} --config
      when: vmlist.stdout.find(inventory_hostname) == -1

    - name: Setting the current memory for VirtualMachines
      shell: virsh setmem {{inventory_hostname}} {{currentmem}} --config
      when: vmlist.stdout.find(inventory_hostname) == -1

    - name: Starting the created VirtualMachines
      shell: virsh start {{inventory_hostname}}
      when: vmlist.stdout.find(inventory_hostname) == -1

    - name: Listing the ip address of created vm
      shell: virsh domifaddr {{inventory_hostname}}|tail -2 | awk '{print $4}'| cut -d/ -f1
      register: output
      until: output.stdout != ""
      delay: 10
      retries: 5

    - debug: var=output.stdout

- name: copy public key to all Virtual Machine
  hosts: installer,master,node
  connection: local
  tags:
    - copy-id
  tasks:
    - name: Listing the ip address of vm ,where public key needs to be copied
      shell: virsh domifaddr {{inventory_hostname}}|tail -2 | awk '{print $4}'| cut -d/ -f1
      register: tohostname

    - debug: var=tohostname.stdout

    - name: Set authorized key took from file
      shell: sshpass -p 'admin#123' ssh-copy-id -i /root/.ssh/id_rsa.pub -o StrictHostKeyChecking=no {{tohostname.stdout}} -f

- name: set facts for Virtual Machine
  hosts: installer,master,node
  connection: local
  tags:
    - set-facts
  tasks:
    - name: Listing the ip address of vm
      shell: virsh domifaddr {{inventory_hostname}}|tail -2 | awk '{print $4}'| cut -d/ -f1
      register: tohostname

    - debug: var=tohostname.stdout
    - name: :add facts
      local_action:
        module: set_fact
        ansible_ssh_host: "{{ tohostname.stdout }}"


- name: Subscribe the Virtual Machine
  hosts: installer,master,node
  serial: 1
  tags:
    - subscribe
  tasks:
    - name: Subscribe to access.redhat.com
      redhat_subscription:
        state: present
        consumer_name: "{{inventory_hostname}}"
        username: "{{ redhat_username }}"
        password: "{{ redhat_password }}"
        pool: "{{ redhat_pool }}"


- name: Execute common role for all except dns
  hosts: installer,master,node
  tags:
    - common
  tasks:
    - include_role:
        name: common
      when: "'dns' not in group_names"

- name: Reboot all nodes except dns
  hosts: installer,master,node
  connection: local
  tags:
    - reboot
  tasks:
    - name: reboot {{inventory_hostname}}
      shell: virsh reboot {{inventory_hostname}}
      when: "'dns' not in group_names"
